// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratosblog/internal/biz"
	"kratosblog/internal/conf"
	"kratosblog/internal/data"
	"kratosblog/internal/server"
	"kratosblog/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(bootstrap, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	authRepo := data.NewAuthRepo(dataData, logger)
	categoryRepo := data.NewCategoryRepo(dataData, logger, authRepo)
	categoryUsecase := biz.NewCategoryUsecase(categoryRepo, logger)
	authUsecase := biz.NewAuthUsecase(authRepo, logger)
	categoryService := service.NewCategoryService(categoryUsecase, authUsecase)
	articleRepo := data.NewArticleRepo(dataData, logger, categoryRepo)
	articleUsecase := biz.NewArticleUsecase(articleRepo, logger)
	articleService := service.NewArticleService(articleUsecase, categoryUsecase)
	services := server.NewServices(greeterService, categoryService, articleService)
	grpcServer := server.NewGRPCServer(bootstrap, logger, services)
	httpServer := server.NewHTTPServer(bootstrap, logger, services)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
